Here are your instructions:


Create a Python3_Homework04 project and assign it to your Python3_Homework working set. In the Python3_Homework04/src folder, create a program named find_regex.py that takes the following text and finds the start and end positions of the phrase, "Regular Expressions."

Text to use in find_regex.py:
In the 1950s, mathematician Stephen Cole Kleene described automata theory and formal language theory in a set of models using a notation called "regular sets" as a method to do pattern matching. Active usage of this system, called Regular Expressions, started in the 1960s and continued under such pioneers as David J. Farber, Ralph E. Griswold, Ivan P. Polonsky, Ken Thompson, and Henry Spencer.
Your project should meet the following conditions:
•Your code must return 231 as the start and 250 as the end.
•You must include a separate test_find_regex.py program that confirms that your code functions as instructed.

Submit find_regex.py and test_find_regex.py when they are working to your satisfaction.
Overall Comments:
Hi Prasad,

You have done a terrific job finding a parsimonious solution to this one. Good work.

FYI, here's another approach you might take to format this text:

    txt = ("In the 1950s, mathematician Stephan Cole Kleene "
             "described automata theory and formal "
             "language theory in a set of models"
             ... )  etc.
Regular expressions, I think you realize, comprise their own "mini language" that gets embedded within other languages such as Perl, Ruby and Python. Perl programs are more likely to resort to regex use as a tool of first choice  whereas Python in design is a bit more reticent, tucks them away in a module. Python's re library is quite capable, at least in this C-language incarnation that we're using.  You can study regex-language as a separate topic,  independently of Python, much as you can study SQL.
Mentor Comments:
m.group(0) returns the entire matched pattern.  If there are parenthesized subgroups in the regex, then those are found in group(1) and beyond.

m.groups() returns all the subgroups.

http://docs.python.org/3.4/library/re.html#match-objects
